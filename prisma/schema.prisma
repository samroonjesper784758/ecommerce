generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum OrderEventStatus {
  PENDING
  ACCEPTED
  OUT_FOR_DELIVERY
  DELIVERD
  CANCELLED
}

model User {
  id                     String    @id @default(uuid())
  name                   String
  password               String
  email                  String    @unique
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  role                   Role      @default(USER)
  defaultShippingAddress String?
  address                Address[]
  Cart                   Cart[]
  order                  Order[]

  @@map("users")
}

model Address {
  id        String   @id @default(uuid())
  lineOne   String
  lineTwo   String?
  city      String
  pinCode   String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  country   String
  user      User     @relation(fields: [userId], references: [id])
}

model Product {
  id           String         @id @default(uuid())
  name         String
  description  String
  price        Float
  tags         String[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Cart         Cart[]
  OrderProduct OrderProduct[]

  @@map("products")
}

model Cart {
  id         String   @id @default(uuid())
  userId     String
  productId  String
  quantity   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  price      Float
  totalPrice Float
  products   Product  @relation(fields: [productId], references: [id])
  users      User     @relation(fields: [userId], references: [id])
}

model Order {
  id         String         @id @default(uuid())
  userId     String
  user       User           @relation(fields: [userId], references: [id])
  address    String
  netAmount  Float
  products   OrderProduct[]
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  OrderEvent OrderEvent[]
}

model OrderProduct {
  id        String   @id @default(uuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderEvent {
  id        String           @id @default(uuid())
  orderId   String
  order     Order            @relation(fields: [orderId], references: [id])
  status    OrderEventStatus @default(PENDING)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}
